from enum import Enum
from random import randint
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup

# from db.operations.user_profile import delete_everithing
from handlers.common.checks import checker
from handlers.client.email import send_email
from db.operations.messages import send_msg_user
from db.operations.users import update_user, find_user
from handlers.client.shared.contains import contains_command
from handlers.client.shared.keyboard import create_reply_keyboard


router = Router()


N_STEPS = 7;


class StartStates(StatesGroup):
    """
    State management for handling the registration process, including email verification, profile setup, 
    and program details.
    """
    EMAIL_GET = State()
    EMAIL_SET = State()
    NAME = State()
    AGE = State()
    PROGRAM_NAME = State()
    PROGRAM_YEAR = State()
    SEX = State()
    PARTNER_SEX = State()
    ABOUT = State()

class StartSexChoices(Enum):
    BOY = "–ø–∞—Ä–µ–Ω—å"
    GIRL = "–¥–µ–≤—É—à–∫–∞"
    
    @classmethod
    def has_value(cls, value):
        """
        Checks if the provided value is a valid program name.
        """
        return value in cls._value2member_map_


class StartProgramNames(Enum):
    """
    Enum class representing available program names for the registration process.
    """
    BAE = "BAE"
    MAE = "MAE"
    MAF = "MAF"
    MIF = "MiF"
    MSF = "MSF"
    EDS = "EDS"
    
    @classmethod
    def has_value(cls, value):
        """
        Checks if the provided value is a valid program name.
        """
        return value in cls._value2member_map_


# @router.message(StateFilter(None), Command("d"))
# async def cmd_AAAAAA(message: types.Message, state: FSMContext):
#     await delete_everithing()


@router.message(StateFilter(None), Command("start"))
@checker
async def cmd_start(message: types.Message, state: FSMContext):
    """
    Handles the /start command. Initiates the registration process or allows users to update their profile 
    if they have already registered.
    """
    exist = await find_user(message.from_user.id, ["info.email"])
    exist = exist["info"]["email"]

    if not exist:
        await send_msg_user(message.from_user.id, 
                            "–ü—Ä–∏–≤–µ—Ç! üòä\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ –î–Ω—é –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –†–≠–®.\n\n–í—Å—ë –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ:\n–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å–Ω–∏–∫ –æ–ø–∏—Å–∞–≤ —Å–µ–±—è, –∞ –ø–æ–∑–∂–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞.\n\n–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —ç—Ç–æ –∑–∞–π–º—ë—Ç –º–∏–Ω—É—Ç—É!")

        await send_msg_user(message.from_user.id,
                            "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —Ç—ã –ø—Ä–∏—á–∞—Å—Ç–µ–Ω –∫ –†–≠–®, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã @nes.ru")

        await state.set_state(StartStates.EMAIL_GET)
    else:
        await send_msg_user(message.from_user.id, 
                            "–ü–æ—á—Ç–∞ —É —Ç–µ–±—è —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞, –ø–æ—ç—Ç–æ–º—É –¥–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º—Å—è –ø–æ –¥–∞–Ω–Ω—ã–º")

        await send_msg_user(message.from_user.id, 
                            f"[–®–∞–≥ 1/{N_STEPS}]\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

        await state.set_state(StartStates.NAME)

    return


@router.message(StateFilter(StartStates.EMAIL_GET))
@checker
@contains_command
async def start_email_get(message: types.Message, state: FSMContext):
    """
    Collects the user's @nes.ru email address and sends a verification code if the email is valid.
    """
    if "@nes.ru" in message.text:
        await send_msg_user(message.from_user.id,
                            "–û—Ç–ª–∏—á–Ω–æ, —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n–ü–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥–æ—á–∫—É...")

        code = str(randint(100000, 999999))

        await update_user(message.from_user.id,
                          {"cache.email": message.text, "cache.email_code": code})

        await send_email(message.text, f"–ï—â–µ —Ä–∞–∑ –ø—Ä–∏–≤–µ—Ç!\n–¢–≤–æ–π –∫–æ–¥ –¥–ª—è NEScafeBot: {code}.\n–ö–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ @{message.from_user.username}")

        await send_msg_user(message.from_user.id, 
                            "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–±–µ –Ω–∞ –ø–æ—á—Ç—É –∫–æ–¥ –∏–∑ 6 —Ü–∏—Ñ—Ä.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –µ–≥–æ —Å—é–¥–∞")

        await state.set_state(StartStates.EMAIL_SET)
    else:
        await send_msg_user(message.from_user.id, 
                            "–≠—Ç–æ –Ω–µ @nes.ru –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã üòï\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å",
                            fail=True)
    
    return


@router.message(StateFilter(StartStates.EMAIL_SET))
@checker
@contains_command
async def start_email_set(message: types.Message, state: FSMContext):
    """
    Verifies the email by checking the user's input against the sent verification code.
    """
    cache = await find_user(message.from_user.id, ["cache"])
    email_code = cache["cache"]["email_code"]

    if message.text.replace(' ', '') == email_code:
        email = cache["cache"]["email"]

        await update_user(message.from_user.id, 
                          {"info.email": email, "cache": {}})

        await send_msg_user(message.from_user.id, 
                            "–û—Ç–ª–∏—á–Ω–æ!\n–¢–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É\n\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –±–æ—Ç–µ")

        await send_msg_user(message.from_user.id, 
                            f"[–®–∞–≥ 1/{N_STEPS}]\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üòä")

        await state.set_state(StartStates.NAME)
    else:
        await send_msg_user(message.from_user.id, 
                            "–£–ø—Å, –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥üòï\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.\n\nP.S. –ï—Å–ª–∏ —Ç—ã —Å–ª—É—á–∞–π–Ω–æ —É–∫–∞–∑–∞–ª –Ω–µ —Ç–æ—Ç –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –≤–≤–µ–¥–∏ /cancel –∏ –Ω–∞—á–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.",
                            fail=True)

    return


@router.message(StateFilter(StartStates.NAME))
@checker
@contains_command
async def start_name(message: types.Message, state: FSMContext):
    """
    Collects the user's name and moves to the next step in the registration process.
    """
    if len(message.text) < 50 and len(message.text.split(" ")) <= 3:
        await update_user(message.from_user.id, 
                          {"info.written_name": message.text})

        await send_msg_user(message.from_user.id, 
                            f"[–®–∞–≥ 2/{N_STEPS}]\n–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

        await state.set_state(StartStates.AGE)
    else:
        await send_msg_user(message.from_user.id, 
                            "–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ üòÖ",
                            fail=True)
    
    return


@router.message(StateFilter(StartStates.AGE))
@checker
@contains_command
async def start_age(message: types.Message, state: FSMContext):
    """
    Collects the user's age and verifies that it's a valid number within the acceptable range.
    """
    if message.text.isdigit() and int(message.text) >= 16 and int(message.text) <= 99:
        await update_user(message.from_user.id, 
                          {"info.age": message.text})

        keyboard = create_reply_keyboard(StartProgramNames)

        await send_msg_user(message.from_user.id,
                            f"[–®–∞–≥ 3/{N_STEPS}]\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ\n\n(–ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫—É—é)",
                            reply_markup=keyboard)

        await state.set_state(StartStates.PROGRAM_NAME)
    else:
        await send_msg_user(message.from_user.id, 
                            "–•–º–º, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç üòï\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –æ–¥–Ω–∏–º —á–∏—Å–ª–æ–º",
                            fail=True)
    
    return


@router.message(StateFilter(StartStates.PROGRAM_NAME))
@checker
@contains_command
async def start_program_name(message: types.Message, state: FSMContext):
    """
    Collects the user's program name and ensures it's a valid option from the predefined list.
    """
    program = message.text

    if StartProgramNames.has_value(program):
        await update_user(message.from_user.id, 
                          {"info.program.name": program})

        await send_msg_user(message.from_user.id,
                            f"[–®–∞–≥ 4/{N_STEPS}]\n–¢–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏ –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–≤–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã (–Ω–∞–ø—Ä., 2027)",
                            reply_markup=types.ReplyKeyboardRemove())

        await state.set_state(StartStates.PROGRAM_YEAR)
    else:
        keyboard = create_reply_keyboard(StartProgramNames)
        await send_msg_user(message.from_user.id,
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ üòä",
                            reply_markup=keyboard)

    return


@router.message(StateFilter(StartStates.PROGRAM_YEAR))
@checker
@contains_command
async def start_program_year(message: types.Message, state: FSMContext):
    year = message.text

    if year.isdigit() and int(year) >= 1990 and int(year) < 9999:
        await update_user(message.from_user.id, 
                          {"info.program.year": year})

        keyboard = create_reply_keyboard(StartSexChoices)

        await send_msg_user(message.from_user.id,
                            f"[–®–∞–≥ 5/{N_STEPS}]\n–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª",
                            reply_markup=keyboard)
        
        await state.set_state(StartStates.SEX)
    else:
        await send_msg_user(message.from_user.id, 
                            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≥–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã üòï\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ yyyy (–Ω–∞–ø—Ä., 2027)",
                            fail=True)

    return


@router.message(StateFilter(StartStates.SEX))
@checker
@contains_command
async def start_program_year(message: types.Message, state: FSMContext):
    sex = message.text

    if StartSexChoices.has_value(sex):
        await update_user(message.from_user.id, 
                          {"info.sex": sex})

        keyboard = create_reply_keyboard(StartSexChoices)

        await send_msg_user(message.from_user.id, 
                            f"[–®–∞–≥ 6/{N_STEPS}]\n–ö–∞–∫–æ–≥–æ –ø–æ–ª–∞ —Ç—ã –∏—â–µ—à—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞?",
                            reply_markup=keyboard)

        await state.set_state(StartStates.PARTNER_SEX)
    else:
        await send_msg_user(message.from_user.id, 
                            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –ø–æ–ª –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ üòï\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ",
                            fail=True)

    return


@router.message(StateFilter(StartStates.PARTNER_SEX))
@checker
@contains_command
async def start_program_year(message: types.Message, state: FSMContext):
    """
    Collects the user's program year and ensures it's a valid number.
    """
    partner_sex = message.text

    if StartSexChoices.has_value(partner_sex):
        await update_user(message.from_user.id, 
                          {"info.partner_sex": partner_sex})

        await send_msg_user(message.from_user.id, 
                            f"[–®–∞–≥ 7/{N_STEPS}]\n–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –ª—É—á—à–µ.\n\n–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ —É–º, –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ) –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ—á–µ—Ä–∫.\n–ù–∞–ø–∏—Å–∞—Ç—å –æ —Å–µ–±–µ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–∑–¥–Ω–µ–µ",
                            reply_markup=types.ReplyKeyboardRemove())

        await state.set_state(StartStates.ABOUT)
    else:
        await send_msg_user(message.from_user.id, 
                            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –ø–æ–ª –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ üòï\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ",
                            fail=True)

    return


@router.message(StateFilter(StartStates.ABOUT))
@checker
@contains_command
async def start_about(message: types.Message, state: FSMContext):
    """
    Collects a short description from the user and finalizes the registration process.
    """
    if len(message.text) > 400:
        await send_msg_user(message.from_user.id, 
                    "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ üòÖ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–æ—Ä–æ—á–µ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤)",
                    fail=True)
        return

    existed = await find_user(message.from_user.id, ["finished_profile"])
    existed = existed["finished_profile"]

    await update_user(message.from_user.id, 
                        {"info.about": message.text, 
                        "finished_profile": "yes",})

    if existed == "yes":
        await send_msg_user(message.from_user.id,
                            "–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! üéâ\n–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫–∏ —á–µ—Ä–µ–∑ /survey –∏ /partner_survey")
    else:
        await send_msg_user(message.from_user.id,
                            "–û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, —Å–¥–µ–ª–∞–π /start\n\nP.S. –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è üòâ")
        await send_msg_user(message.from_user.id, 
                            "–ü—Ä–æ–π–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å–Ω–∏–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –æ—Ç–≤–µ—Ç–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ /survey.")

    await state.clear()

    return
